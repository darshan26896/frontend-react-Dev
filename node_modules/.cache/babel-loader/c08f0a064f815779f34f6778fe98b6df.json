{"ast":null,"code":"import _toConsumableArray from \"/home/shivanee/Downloads/ETM-project/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/shivanee/Downloads/ETM-project/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { REGISTER_URL, REQUEST_PASSWORD_URL } from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\nexport default function mockAuth(mock) {\n  // mock.onPost(LOGIN_URL).reply(({ data }) => {\n  //   const { email, password } = JSON.parse(data);\n\n  //   if (email && password) {\n  //     const user = userTableMock.find(\n  //       (x) =>\n  //         x.email.toLowerCase() === email.toLowerCase() &&\n  //         x.password === password\n  //     );\n\n  //     if (user) {\n  //       return [200, { ...user, password: undefined }];\n  //     }\n  //   }\n\n  //   return [400];\n  // });\n\n  mock.onPost(REGISTER_URL).reply(function (_ref) {\n    var data = _ref.data;\n    var _JSON$parse = JSON.parse(data),\n      email = _JSON$parse.email,\n      fullname = _JSON$parse.fullname,\n      username = _JSON$parse.username,\n      password = _JSON$parse.password;\n    if (email && fullname && username && password) {\n      var user = {\n        id: generateUserId(),\n        email: email,\n        fullname: fullname,\n        username: username,\n        password: password,\n        firstname: fullname,\n        lastname: \"Stark\",\n        roles: [2],\n        // Manager\n        authToken: \"auth-token-\" + Math.random(),\n        refreshToken: \"auth-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n      userTableMock.push(user);\n      return [200, _objectSpread(_objectSpread({}, user), {}, {\n        password: undefined\n      })];\n    }\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(function (_ref2) {\n    var data = _ref2.data;\n    var _JSON$parse2 = JSON.parse(data),\n      email = _JSON$parse2.email;\n    if (email) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase();\n      });\n      if (user) {\n        user.password = undefined;\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n    return [400];\n  });\n\n  // mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\n  //   const authToken =\n  //     Authorization &&\n  //     Authorization.startsWith(\"Bearer \") &&\n  //     Authorization.slice(\"Bearer \".length);\n\n  //   if (authToken) {\n  //     const user = userTableMock.find((x) => x.authToken === authToken);\n\n  //     if (user) {\n  //       return [200, { ...user, password: undefined }];\n  //     }\n  //   }\n\n  //   return [401];\n  // });\n\n  function generateUserId() {\n    var ids = userTableMock.map(function (el) {\n      return el.id;\n    });\n    var maxId = Math.max.apply(Math, _toConsumableArray(ids));\n    return maxId + 1;\n  }\n}","map":{"version":3,"names":["REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","_ref","data","_JSON$parse","JSON","parse","email","fullname","username","password","user","id","generateUserId","firstname","lastname","roles","authToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","_objectSpread","undefined","_ref2","_JSON$parse2","find","x","toLowerCase","ids","map","el","maxId","max","apply","_toConsumableArray"],"sources":["/home/shivanee/Downloads/ETM-project/react/src/app/modules/Auth/__mocks__/mockAuth.js"],"sourcesContent":["import {\r\n  \r\n  \r\n\r\n\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL,\r\n} from \"../_redux/authCrud\";\r\nimport userTableMock from \"./userTableMock\";\r\n\r\nexport default function mockAuth(mock) {\r\n  // mock.onPost(LOGIN_URL).reply(({ data }) => {\r\n  //   const { email, password } = JSON.parse(data);\r\n\r\n  //   if (email && password) {\r\n  //     const user = userTableMock.find(\r\n  //       (x) =>\r\n  //         x.email.toLowerCase() === email.toLowerCase() &&\r\n  //         x.password === password\r\n  //     );\r\n\r\n  //     if (user) {\r\n  //       return [200, { ...user, password: undefined }];\r\n  //     }\r\n  //   }\r\n\r\n  //   return [400];\r\n  // });\r\n\r\n  mock.onPost(REGISTER_URL).reply(({ data }) => {\r\n    const { email, fullname, username, password } = JSON.parse(data);\r\n\r\n    if (email && fullname && username && password) {\r\n      const user = {\r\n        id: generateUserId(),\r\n        email,\r\n        fullname,\r\n        username,\r\n        password,\r\n        firstname: fullname,\r\n        lastname: \"Stark\",\r\n        roles: [2], // Manager\r\n        authToken: \"auth-token-\" + Math.random(),\r\n        refreshToken: \"auth-token-\" + Math.random(),\r\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\",\r\n      };\r\n\r\n      userTableMock.push(user);\r\n\r\n      return [200, { ...user, password: undefined }];\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\r\n    const { email } = JSON.parse(data);\r\n\r\n    if (email) {\r\n      const user = userTableMock.find(\r\n        (x) => x.email.toLowerCase() === email.toLowerCase()\r\n      );\r\n\r\n      if (user) {\r\n        user.password = undefined;\r\n\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  // mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\r\n  //   const authToken =\r\n  //     Authorization &&\r\n  //     Authorization.startsWith(\"Bearer \") &&\r\n  //     Authorization.slice(\"Bearer \".length);\r\n\r\n  //   if (authToken) {\r\n  //     const user = userTableMock.find((x) => x.authToken === authToken);\r\n\r\n  //     if (user) {\r\n  //       return [200, { ...user, password: undefined }];\r\n  //     }\r\n  //   }\r\n\r\n  //   return [401];\r\n  // });\r\n\r\n  function generateUserId() {\r\n    const ids = userTableMock.map((el) => el.id);\r\n    const maxId = Math.max(...ids);\r\n    return maxId + 1;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAKEA,YAAY,EACZC,oBAAoB,QACf,oBAAoB;AAC3B,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,eAAe,SAASC,QAAQA,CAACC,IAAI,EAAE;EACrC;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEAA,IAAI,CAACC,MAAM,CAACL,YAAY,CAAC,CAACM,KAAK,CAAC,UAAAC,IAAA,EAAc;IAAA,IAAXC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACrC,IAAAC,WAAA,GAAgDC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAAxDI,KAAK,GAAAH,WAAA,CAALG,KAAK;MAAEC,QAAQ,GAAAJ,WAAA,CAARI,QAAQ;MAAEC,QAAQ,GAAAL,WAAA,CAARK,QAAQ;MAAEC,QAAQ,GAAAN,WAAA,CAARM,QAAQ;IAE3C,IAAIH,KAAK,IAAIC,QAAQ,IAAIC,QAAQ,IAAIC,QAAQ,EAAE;MAC7C,IAAMC,IAAI,GAAG;QACXC,EAAE,EAAEC,cAAc,EAAE;QACpBN,KAAK,EAALA,KAAK;QACLC,QAAQ,EAARA,QAAQ;QACRC,QAAQ,EAARA,QAAQ;QACRC,QAAQ,EAARA,QAAQ;QACRI,SAAS,EAAEN,QAAQ;QACnBO,QAAQ,EAAE,OAAO;QACjBC,KAAK,EAAE,CAAC,CAAC,CAAC;QAAE;QACZC,SAAS,EAAE,aAAa,GAAGC,IAAI,CAACC,MAAM,EAAE;QACxCC,YAAY,EAAE,aAAa,GAAGF,IAAI,CAACC,MAAM,EAAE;QAC3CE,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG;MAChC,CAAC;MAED3B,aAAa,CAAC4B,IAAI,CAACd,IAAI,CAAC;MAExB,OAAO,CAAC,GAAG,EAAAe,aAAA,CAAAA,aAAA,KAAOf,IAAI;QAAED,QAAQ,EAAEiB;MAAS,GAAG;IAChD;IAEA,OAAO,CAAC,GAAG,CAAC;EACd,CAAC,CAAC;EAEF5B,IAAI,CAACC,MAAM,CAACJ,oBAAoB,CAAC,CAACK,KAAK,CAAC,UAAA2B,KAAA,EAAc;IAAA,IAAXzB,IAAI,GAAAyB,KAAA,CAAJzB,IAAI;IAC7C,IAAA0B,YAAA,GAAkBxB,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAA1BI,KAAK,GAAAsB,YAAA,CAALtB,KAAK;IAEb,IAAIA,KAAK,EAAE;MACT,IAAMI,IAAI,GAAGd,aAAa,CAACiC,IAAI,CAC7B,UAACC,CAAC;QAAA,OAAKA,CAAC,CAACxB,KAAK,CAACyB,WAAW,EAAE,KAAKzB,KAAK,CAACyB,WAAW,EAAE;MAAA,EACrD;MAED,IAAIrB,IAAI,EAAE;QACRA,IAAI,CAACD,QAAQ,GAAGiB,SAAS;QAEzB,OAAO,CAAC,GAAG,EAAAD,aAAA,CAAAA,aAAA,KAAOf,IAAI;UAAED,QAAQ,EAAEiB;QAAS,GAAG;MAChD;IACF;IAEA,OAAO,CAAC,GAAG,CAAC;EACd,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,SAASd,cAAcA,CAAA,EAAG;IACxB,IAAMoB,GAAG,GAAGpC,aAAa,CAACqC,GAAG,CAAC,UAACC,EAAE;MAAA,OAAKA,EAAE,CAACvB,EAAE;IAAA,EAAC;IAC5C,IAAMwB,KAAK,GAAGlB,IAAI,CAACmB,GAAG,CAAAC,KAAA,CAARpB,IAAI,EAAAqB,kBAAA,CAAQN,GAAG,EAAC;IAC9B,OAAOG,KAAK,GAAG,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module"}